trigger:
- master
pool:
  vmImage: 'windows-latest'
variables:
- group: 'Certificate'
- name: 'solution'
  value: '**/*.sln'
- name: 'buildPlatform'
  value: 'x64'
- name: 'buildConfiguration'
  value: 'Release'
- name: 'msixInstallUrl'
  value: http://localhost:8080
- name: 'packageVersion'
  value: 1.0.0
- name: 'packageName'
  value: 'Terminal'
jobs:
- job: BuildMSIX
  steps:
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        [xml]$manifest= get-content "Terminal\Package.appxmanifest"
        $manifest.Package.Identity.Version = "$(packageVersion).$(Build.BuildId)"
        $manifest.Package.Identity.Name = "demo-864d9095-955f-4d3c-adb0-6574a5acb88b"
        $manifest.Package.Properties.DisplayName = "$(packageName)"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "$(packageName)"
        $manifest.save("Terminal\Package.appxmanifest")
  - task: DownloadSecureFile@1
    name: mySecureFile
    displayName: 'Download CA certificate'
    inputs:
      secureFile: 'Terminal_TemporaryKey.pfx'
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Start adding the PFX file to the certificate store."
        $pfxpath = '$(mySecureFile.secureFilePath)'
        $password = '$(password)'
        echo '$(mySecureFile.secureFilePath)'
        echo '$(password)'
        Add-Type -AssemblyName System.Security
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
        $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
        $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
        $store.Add($cert)
        $store.Close()
    displayName: 'Install PFX File'
  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/restore /p:AppInstallerUri="$(msixInstallUrl)/" /p:AppxPackageDir="$(Build.ArtifactStagingDirectory)/" /p:UapAppxPackageBuildMode=StoreAndSideload /p:GenerateAppInstallerFile=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateKeyFile="$(mySecureFile.secureFilePath)" /p:PackageCertificatePassword="$(password)"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  #- task: Docker@2
  #  inputs:
  #    command: 'build'
  #    Dockerfile: '**/Dockerfile'
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        [xml]$appInst = get-content "$(Build.ArtifactStagingDirectory)\*.appinstaller"
        $appInst.AppInstaller.UpdateSettings.OnLaunch.HoursBetweenUpdateChecks="1"
        $appInst.save("$(Build.ArtifactStagingDirectory)\*.appinstaller")
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'