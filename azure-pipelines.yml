trigger: 
- master

variables:
- group: 'Certificate' # variable group
- name: 'buildPlatform'
  value: 'x64'
- name: 'buildConfiguration'
  value: 'release'
- name: 'major'
  value: 1
- name: 'minor'
  value: 0
- name: 'build'
  value: 0
- name: 'revision'
  value: $[counter('rev', 0)]
- name: 'appxPackageDir'
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'
####
 #Next variable is important because the pipelines runs on the repository root
-name: 'folderRepository'
  value: 'TerminalV2'
  
steps:
- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(Agent.BuildDirectory)\s\$(folderRepository)\TerminalV2.sln'
    feedsToUse: 'select'

- task: DownloadSecureFile@1
  name: mySecureFile
  displayName: 'Download CA certificate'
  inputs:
    secureFile: 'Terminal_TemporaryKey.pfx'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."
      $pfxpath = '$(mySecureFile.secureFilePath)'
      $password = '$(password)'      
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()
  displayName: 'Install PFX File'

####
#This step builds the Systray project before the package, because they are not explicitly referenced to each other.
- task: VSBuild@1
  inputs:
    solution: '$(Agent.BuildDirectory)\s\$(folderRepository)\SystrayComponent\SystrayComponent.csproj'
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
  displayName: 'Building Win32 App'
####
#This step builds, package and sign the application.
- task: VSBuild@1
  inputs:
    solution: $(Agent.BuildDirectory)\s\$(folderRepository)\PackageManager\PackageManager.wapproj
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
    msbuildArguments: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Never /p:UapAppxPackageBuildMode=StoreAndSideload /p:AppxPackageSigningEnabled=true /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
  displayName: 'Package the App'
####
#This step copies the output files so they can be deployed.
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'

####
#This step publishes the artifact.
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'